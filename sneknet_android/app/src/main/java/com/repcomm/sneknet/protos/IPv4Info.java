// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ipc.proto

// Protobuf Java Version: 4.26.0
package com.repcomm.sneknet.protos;

/**
 * Protobuf type {@code ipc.IPv4Info}
 */
public final class IPv4Info extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:ipc.IPv4Info)
    IPv4InfoOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 26,
      /* patch= */ 0,
      /* suffix= */ "",
      IPv4Info.class.getName());
  }
  // Use IPv4Info.newBuilder() to construct.
  private IPv4Info(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private IPv4Info() {
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.repcomm.sneknet.protos.IPC.internal_static_ipc_IPv4Info_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.repcomm.sneknet.protos.IPC.internal_static_ipc_IPv4Info_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.repcomm.sneknet.protos.IPv4Info.class, com.repcomm.sneknet.protos.IPv4Info.Builder.class);
  }

  public static final int SRCIPV4_FIELD_NUMBER = 1;
  private int srcIPv4_ = 0;
  /**
   * <code>int32 SrcIPv4 = 1;</code>
   * @return The srcIPv4.
   */
  @java.lang.Override
  public int getSrcIPv4() {
    return srcIPv4_;
  }

  public static final int DSTIPV4_FIELD_NUMBER = 2;
  private int dstIPv4_ = 0;
  /**
   * <code>int32 DstIPv4 = 2;</code>
   * @return The dstIPv4.
   */
  @java.lang.Override
  public int getDstIPv4() {
    return dstIPv4_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (srcIPv4_ != 0) {
      output.writeInt32(1, srcIPv4_);
    }
    if (dstIPv4_ != 0) {
      output.writeInt32(2, dstIPv4_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (srcIPv4_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(1, srcIPv4_);
    }
    if (dstIPv4_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, dstIPv4_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.repcomm.sneknet.protos.IPv4Info)) {
      return super.equals(obj);
    }
    com.repcomm.sneknet.protos.IPv4Info other = (com.repcomm.sneknet.protos.IPv4Info) obj;

    if (getSrcIPv4()
        != other.getSrcIPv4()) return false;
    if (getDstIPv4()
        != other.getDstIPv4()) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + SRCIPV4_FIELD_NUMBER;
    hash = (53 * hash) + getSrcIPv4();
    hash = (37 * hash) + DSTIPV4_FIELD_NUMBER;
    hash = (53 * hash) + getDstIPv4();
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.repcomm.sneknet.protos.IPv4Info parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.repcomm.sneknet.protos.IPv4Info parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.repcomm.sneknet.protos.IPv4Info parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.repcomm.sneknet.protos.IPv4Info parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.repcomm.sneknet.protos.IPv4Info parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.repcomm.sneknet.protos.IPv4Info parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.repcomm.sneknet.protos.IPv4Info parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static com.repcomm.sneknet.protos.IPv4Info parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.repcomm.sneknet.protos.IPv4Info parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.repcomm.sneknet.protos.IPv4Info parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.repcomm.sneknet.protos.IPv4Info parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static com.repcomm.sneknet.protos.IPv4Info parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.repcomm.sneknet.protos.IPv4Info prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code ipc.IPv4Info}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:ipc.IPv4Info)
      com.repcomm.sneknet.protos.IPv4InfoOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.repcomm.sneknet.protos.IPC.internal_static_ipc_IPv4Info_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.repcomm.sneknet.protos.IPC.internal_static_ipc_IPv4Info_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.repcomm.sneknet.protos.IPv4Info.class, com.repcomm.sneknet.protos.IPv4Info.Builder.class);
    }

    // Construct using com.repcomm.sneknet.protos.IPv4Info.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      srcIPv4_ = 0;
      dstIPv4_ = 0;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.repcomm.sneknet.protos.IPC.internal_static_ipc_IPv4Info_descriptor;
    }

    @java.lang.Override
    public com.repcomm.sneknet.protos.IPv4Info getDefaultInstanceForType() {
      return com.repcomm.sneknet.protos.IPv4Info.getDefaultInstance();
    }

    @java.lang.Override
    public com.repcomm.sneknet.protos.IPv4Info build() {
      com.repcomm.sneknet.protos.IPv4Info result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.repcomm.sneknet.protos.IPv4Info buildPartial() {
      com.repcomm.sneknet.protos.IPv4Info result = new com.repcomm.sneknet.protos.IPv4Info(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.repcomm.sneknet.protos.IPv4Info result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.srcIPv4_ = srcIPv4_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.dstIPv4_ = dstIPv4_;
      }
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.repcomm.sneknet.protos.IPv4Info) {
        return mergeFrom((com.repcomm.sneknet.protos.IPv4Info)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.repcomm.sneknet.protos.IPv4Info other) {
      if (other == com.repcomm.sneknet.protos.IPv4Info.getDefaultInstance()) return this;
      if (other.getSrcIPv4() != 0) {
        setSrcIPv4(other.getSrcIPv4());
      }
      if (other.getDstIPv4() != 0) {
        setDstIPv4(other.getDstIPv4());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              srcIPv4_ = input.readInt32();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 16: {
              dstIPv4_ = input.readInt32();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private int srcIPv4_ ;
    /**
     * <code>int32 SrcIPv4 = 1;</code>
     * @return The srcIPv4.
     */
    @java.lang.Override
    public int getSrcIPv4() {
      return srcIPv4_;
    }
    /**
     * <code>int32 SrcIPv4 = 1;</code>
     * @param value The srcIPv4 to set.
     * @return This builder for chaining.
     */
    public Builder setSrcIPv4(int value) {

      srcIPv4_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>int32 SrcIPv4 = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearSrcIPv4() {
      bitField0_ = (bitField0_ & ~0x00000001);
      srcIPv4_ = 0;
      onChanged();
      return this;
    }

    private int dstIPv4_ ;
    /**
     * <code>int32 DstIPv4 = 2;</code>
     * @return The dstIPv4.
     */
    @java.lang.Override
    public int getDstIPv4() {
      return dstIPv4_;
    }
    /**
     * <code>int32 DstIPv4 = 2;</code>
     * @param value The dstIPv4 to set.
     * @return This builder for chaining.
     */
    public Builder setDstIPv4(int value) {

      dstIPv4_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <code>int32 DstIPv4 = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearDstIPv4() {
      bitField0_ = (bitField0_ & ~0x00000002);
      dstIPv4_ = 0;
      onChanged();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:ipc.IPv4Info)
  }

  // @@protoc_insertion_point(class_scope:ipc.IPv4Info)
  private static final com.repcomm.sneknet.protos.IPv4Info DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.repcomm.sneknet.protos.IPv4Info();
  }

  public static com.repcomm.sneknet.protos.IPv4Info getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<IPv4Info>
      PARSER = new com.google.protobuf.AbstractParser<IPv4Info>() {
    @java.lang.Override
    public IPv4Info parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<IPv4Info> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<IPv4Info> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.repcomm.sneknet.protos.IPv4Info getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

