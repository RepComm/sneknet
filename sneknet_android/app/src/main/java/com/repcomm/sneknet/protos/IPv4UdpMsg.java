// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ipc.proto

// Protobuf Java Version: 4.26.0
package com.repcomm.sneknet.protos;

/**
 * Protobuf type {@code ipc.IPv4UdpMsg}
 */
public final class IPv4UdpMsg extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:ipc.IPv4UdpMsg)
    IPv4UdpMsgOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 26,
      /* patch= */ 0,
      /* suffix= */ "",
      IPv4UdpMsg.class.getName());
  }
  // Use IPv4UdpMsg.newBuilder() to construct.
  private IPv4UdpMsg(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private IPv4UdpMsg() {
    payload_ = com.google.protobuf.ByteString.EMPTY;
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.repcomm.sneknet.protos.IPC.internal_static_ipc_IPv4UdpMsg_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.repcomm.sneknet.protos.IPC.internal_static_ipc_IPv4UdpMsg_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.repcomm.sneknet.protos.IPv4UdpMsg.class, com.repcomm.sneknet.protos.IPv4UdpMsg.Builder.class);
  }

  private int bitField0_;
  public static final int SRCPORT_FIELD_NUMBER = 1;
  private int srcPort_ = 0;
  /**
   * <code>int32 SrcPort = 1;</code>
   * @return The srcPort.
   */
  @java.lang.Override
  public int getSrcPort() {
    return srcPort_;
  }

  public static final int DSTPORT_FIELD_NUMBER = 2;
  private int dstPort_ = 0;
  /**
   * <code>int32 DstPort = 2;</code>
   * @return The dstPort.
   */
  @java.lang.Override
  public int getDstPort() {
    return dstPort_;
  }

  public static final int IPV4_FIELD_NUMBER = 3;
  private com.repcomm.sneknet.protos.IPv4Info iPv4_;
  /**
   * <code>.ipc.IPv4Info IPv4 = 3;</code>
   * @return Whether the iPv4 field is set.
   */
  @java.lang.Override
  public boolean hasIPv4() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <code>.ipc.IPv4Info IPv4 = 3;</code>
   * @return The iPv4.
   */
  @java.lang.Override
  public com.repcomm.sneknet.protos.IPv4Info getIPv4() {
    return iPv4_ == null ? com.repcomm.sneknet.protos.IPv4Info.getDefaultInstance() : iPv4_;
  }
  /**
   * <code>.ipc.IPv4Info IPv4 = 3;</code>
   */
  @java.lang.Override
  public com.repcomm.sneknet.protos.IPv4InfoOrBuilder getIPv4OrBuilder() {
    return iPv4_ == null ? com.repcomm.sneknet.protos.IPv4Info.getDefaultInstance() : iPv4_;
  }

  public static final int PAYLOAD_FIELD_NUMBER = 4;
  private com.google.protobuf.ByteString payload_ = com.google.protobuf.ByteString.EMPTY;
  /**
   * <code>bytes Payload = 4;</code>
   * @return The payload.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getPayload() {
    return payload_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (srcPort_ != 0) {
      output.writeInt32(1, srcPort_);
    }
    if (dstPort_ != 0) {
      output.writeInt32(2, dstPort_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(3, getIPv4());
    }
    if (!payload_.isEmpty()) {
      output.writeBytes(4, payload_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (srcPort_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(1, srcPort_);
    }
    if (dstPort_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, dstPort_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getIPv4());
    }
    if (!payload_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(4, payload_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.repcomm.sneknet.protos.IPv4UdpMsg)) {
      return super.equals(obj);
    }
    com.repcomm.sneknet.protos.IPv4UdpMsg other = (com.repcomm.sneknet.protos.IPv4UdpMsg) obj;

    if (getSrcPort()
        != other.getSrcPort()) return false;
    if (getDstPort()
        != other.getDstPort()) return false;
    if (hasIPv4() != other.hasIPv4()) return false;
    if (hasIPv4()) {
      if (!getIPv4()
          .equals(other.getIPv4())) return false;
    }
    if (!getPayload()
        .equals(other.getPayload())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + SRCPORT_FIELD_NUMBER;
    hash = (53 * hash) + getSrcPort();
    hash = (37 * hash) + DSTPORT_FIELD_NUMBER;
    hash = (53 * hash) + getDstPort();
    if (hasIPv4()) {
      hash = (37 * hash) + IPV4_FIELD_NUMBER;
      hash = (53 * hash) + getIPv4().hashCode();
    }
    hash = (37 * hash) + PAYLOAD_FIELD_NUMBER;
    hash = (53 * hash) + getPayload().hashCode();
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.repcomm.sneknet.protos.IPv4UdpMsg parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.repcomm.sneknet.protos.IPv4UdpMsg parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.repcomm.sneknet.protos.IPv4UdpMsg parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.repcomm.sneknet.protos.IPv4UdpMsg parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.repcomm.sneknet.protos.IPv4UdpMsg parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.repcomm.sneknet.protos.IPv4UdpMsg parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.repcomm.sneknet.protos.IPv4UdpMsg parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static com.repcomm.sneknet.protos.IPv4UdpMsg parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.repcomm.sneknet.protos.IPv4UdpMsg parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.repcomm.sneknet.protos.IPv4UdpMsg parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.repcomm.sneknet.protos.IPv4UdpMsg parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static com.repcomm.sneknet.protos.IPv4UdpMsg parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.repcomm.sneknet.protos.IPv4UdpMsg prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code ipc.IPv4UdpMsg}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:ipc.IPv4UdpMsg)
      com.repcomm.sneknet.protos.IPv4UdpMsgOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.repcomm.sneknet.protos.IPC.internal_static_ipc_IPv4UdpMsg_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.repcomm.sneknet.protos.IPC.internal_static_ipc_IPv4UdpMsg_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.repcomm.sneknet.protos.IPv4UdpMsg.class, com.repcomm.sneknet.protos.IPv4UdpMsg.Builder.class);
    }

    // Construct using com.repcomm.sneknet.protos.IPv4UdpMsg.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessage
              .alwaysUseFieldBuilders) {
        getIPv4FieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      srcPort_ = 0;
      dstPort_ = 0;
      iPv4_ = null;
      if (iPv4Builder_ != null) {
        iPv4Builder_.dispose();
        iPv4Builder_ = null;
      }
      payload_ = com.google.protobuf.ByteString.EMPTY;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.repcomm.sneknet.protos.IPC.internal_static_ipc_IPv4UdpMsg_descriptor;
    }

    @java.lang.Override
    public com.repcomm.sneknet.protos.IPv4UdpMsg getDefaultInstanceForType() {
      return com.repcomm.sneknet.protos.IPv4UdpMsg.getDefaultInstance();
    }

    @java.lang.Override
    public com.repcomm.sneknet.protos.IPv4UdpMsg build() {
      com.repcomm.sneknet.protos.IPv4UdpMsg result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.repcomm.sneknet.protos.IPv4UdpMsg buildPartial() {
      com.repcomm.sneknet.protos.IPv4UdpMsg result = new com.repcomm.sneknet.protos.IPv4UdpMsg(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.repcomm.sneknet.protos.IPv4UdpMsg result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.srcPort_ = srcPort_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.dstPort_ = dstPort_;
      }
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.iPv4_ = iPv4Builder_ == null
            ? iPv4_
            : iPv4Builder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.payload_ = payload_;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.repcomm.sneknet.protos.IPv4UdpMsg) {
        return mergeFrom((com.repcomm.sneknet.protos.IPv4UdpMsg)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.repcomm.sneknet.protos.IPv4UdpMsg other) {
      if (other == com.repcomm.sneknet.protos.IPv4UdpMsg.getDefaultInstance()) return this;
      if (other.getSrcPort() != 0) {
        setSrcPort(other.getSrcPort());
      }
      if (other.getDstPort() != 0) {
        setDstPort(other.getDstPort());
      }
      if (other.hasIPv4()) {
        mergeIPv4(other.getIPv4());
      }
      if (other.getPayload() != com.google.protobuf.ByteString.EMPTY) {
        setPayload(other.getPayload());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              srcPort_ = input.readInt32();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 16: {
              dstPort_ = input.readInt32();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            case 26: {
              input.readMessage(
                  getIPv4FieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            case 34: {
              payload_ = input.readBytes();
              bitField0_ |= 0x00000008;
              break;
            } // case 34
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private int srcPort_ ;
    /**
     * <code>int32 SrcPort = 1;</code>
     * @return The srcPort.
     */
    @java.lang.Override
    public int getSrcPort() {
      return srcPort_;
    }
    /**
     * <code>int32 SrcPort = 1;</code>
     * @param value The srcPort to set.
     * @return This builder for chaining.
     */
    public Builder setSrcPort(int value) {

      srcPort_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>int32 SrcPort = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearSrcPort() {
      bitField0_ = (bitField0_ & ~0x00000001);
      srcPort_ = 0;
      onChanged();
      return this;
    }

    private int dstPort_ ;
    /**
     * <code>int32 DstPort = 2;</code>
     * @return The dstPort.
     */
    @java.lang.Override
    public int getDstPort() {
      return dstPort_;
    }
    /**
     * <code>int32 DstPort = 2;</code>
     * @param value The dstPort to set.
     * @return This builder for chaining.
     */
    public Builder setDstPort(int value) {

      dstPort_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <code>int32 DstPort = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearDstPort() {
      bitField0_ = (bitField0_ & ~0x00000002);
      dstPort_ = 0;
      onChanged();
      return this;
    }

    private com.repcomm.sneknet.protos.IPv4Info iPv4_;
    private com.google.protobuf.SingleFieldBuilder<
        com.repcomm.sneknet.protos.IPv4Info, com.repcomm.sneknet.protos.IPv4Info.Builder, com.repcomm.sneknet.protos.IPv4InfoOrBuilder> iPv4Builder_;
    /**
     * <code>.ipc.IPv4Info IPv4 = 3;</code>
     * @return Whether the iPv4 field is set.
     */
    public boolean hasIPv4() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>.ipc.IPv4Info IPv4 = 3;</code>
     * @return The iPv4.
     */
    public com.repcomm.sneknet.protos.IPv4Info getIPv4() {
      if (iPv4Builder_ == null) {
        return iPv4_ == null ? com.repcomm.sneknet.protos.IPv4Info.getDefaultInstance() : iPv4_;
      } else {
        return iPv4Builder_.getMessage();
      }
    }
    /**
     * <code>.ipc.IPv4Info IPv4 = 3;</code>
     */
    public Builder setIPv4(com.repcomm.sneknet.protos.IPv4Info value) {
      if (iPv4Builder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        iPv4_ = value;
      } else {
        iPv4Builder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <code>.ipc.IPv4Info IPv4 = 3;</code>
     */
    public Builder setIPv4(
        com.repcomm.sneknet.protos.IPv4Info.Builder builderForValue) {
      if (iPv4Builder_ == null) {
        iPv4_ = builderForValue.build();
      } else {
        iPv4Builder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <code>.ipc.IPv4Info IPv4 = 3;</code>
     */
    public Builder mergeIPv4(com.repcomm.sneknet.protos.IPv4Info value) {
      if (iPv4Builder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
          iPv4_ != null &&
          iPv4_ != com.repcomm.sneknet.protos.IPv4Info.getDefaultInstance()) {
          getIPv4Builder().mergeFrom(value);
        } else {
          iPv4_ = value;
        }
      } else {
        iPv4Builder_.mergeFrom(value);
      }
      if (iPv4_ != null) {
        bitField0_ |= 0x00000004;
        onChanged();
      }
      return this;
    }
    /**
     * <code>.ipc.IPv4Info IPv4 = 3;</code>
     */
    public Builder clearIPv4() {
      bitField0_ = (bitField0_ & ~0x00000004);
      iPv4_ = null;
      if (iPv4Builder_ != null) {
        iPv4Builder_.dispose();
        iPv4Builder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <code>.ipc.IPv4Info IPv4 = 3;</code>
     */
    public com.repcomm.sneknet.protos.IPv4Info.Builder getIPv4Builder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getIPv4FieldBuilder().getBuilder();
    }
    /**
     * <code>.ipc.IPv4Info IPv4 = 3;</code>
     */
    public com.repcomm.sneknet.protos.IPv4InfoOrBuilder getIPv4OrBuilder() {
      if (iPv4Builder_ != null) {
        return iPv4Builder_.getMessageOrBuilder();
      } else {
        return iPv4_ == null ?
            com.repcomm.sneknet.protos.IPv4Info.getDefaultInstance() : iPv4_;
      }
    }
    /**
     * <code>.ipc.IPv4Info IPv4 = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.repcomm.sneknet.protos.IPv4Info, com.repcomm.sneknet.protos.IPv4Info.Builder, com.repcomm.sneknet.protos.IPv4InfoOrBuilder> 
        getIPv4FieldBuilder() {
      if (iPv4Builder_ == null) {
        iPv4Builder_ = new com.google.protobuf.SingleFieldBuilder<
            com.repcomm.sneknet.protos.IPv4Info, com.repcomm.sneknet.protos.IPv4Info.Builder, com.repcomm.sneknet.protos.IPv4InfoOrBuilder>(
                getIPv4(),
                getParentForChildren(),
                isClean());
        iPv4_ = null;
      }
      return iPv4Builder_;
    }

    private com.google.protobuf.ByteString payload_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <code>bytes Payload = 4;</code>
     * @return The payload.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getPayload() {
      return payload_;
    }
    /**
     * <code>bytes Payload = 4;</code>
     * @param value The payload to set.
     * @return This builder for chaining.
     */
    public Builder setPayload(com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      payload_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <code>bytes Payload = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearPayload() {
      bitField0_ = (bitField0_ & ~0x00000008);
      payload_ = getDefaultInstance().getPayload();
      onChanged();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:ipc.IPv4UdpMsg)
  }

  // @@protoc_insertion_point(class_scope:ipc.IPv4UdpMsg)
  private static final com.repcomm.sneknet.protos.IPv4UdpMsg DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.repcomm.sneknet.protos.IPv4UdpMsg();
  }

  public static com.repcomm.sneknet.protos.IPv4UdpMsg getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<IPv4UdpMsg>
      PARSER = new com.google.protobuf.AbstractParser<IPv4UdpMsg>() {
    @java.lang.Override
    public IPv4UdpMsg parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<IPv4UdpMsg> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<IPv4UdpMsg> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.repcomm.sneknet.protos.IPv4UdpMsg getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

