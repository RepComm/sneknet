// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ipc.proto

// Protobuf Java Version: 4.26.0
package com.repcomm.sneknet.protos;

public interface IpcMsgOrBuilder extends
    // @@protoc_insertion_point(interface_extends:ipc.IpcMsg)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>int32 TransactionId = 1;</code>
   * @return The transactionId.
   */
  int getTransactionId();

  /**
   * <pre>
   * *when true, TransactionId is the same as request TransactionId
   * </pre>
   *
   * <code>optional bool IsResponse = 2;</code>
   * @return Whether the isResponse field is set.
   */
  boolean hasIsResponse();
  /**
   * <pre>
   * *when true, TransactionId is the same as request TransactionId
   * </pre>
   *
   * <code>optional bool IsResponse = 2;</code>
   * @return The isResponse.
   */
  boolean getIsResponse();

  /**
   * <pre>
   * *whether a transaction was successful
   * </pre>
   *
   * <code>optional bool IsSuccess = 3;</code>
   * @return Whether the isSuccess field is set.
   */
  boolean hasIsSuccess();
  /**
   * <pre>
   * *whether a transaction was successful
   * </pre>
   *
   * <code>optional bool IsSuccess = 3;</code>
   * @return The isSuccess.
   */
  boolean getIsSuccess();

  /**
   * <pre>
   * *when IsSuccess = false, the error message
   * </pre>
   *
   * <code>optional string Error = 4;</code>
   * @return Whether the error field is set.
   */
  boolean hasError();
  /**
   * <pre>
   * *when IsSuccess = false, the error message
   * </pre>
   *
   * <code>optional string Error = 4;</code>
   * @return The error.
   */
  java.lang.String getError();
  /**
   * <pre>
   * *when IsSuccess = false, the error message
   * </pre>
   *
   * <code>optional string Error = 4;</code>
   * @return The bytes for error.
   */
  com.google.protobuf.ByteString
      getErrorBytes();

  /**
   * <code>.ipc.IPv4TcpMsg IPv4Tcp = 5;</code>
   * @return Whether the iPv4Tcp field is set.
   */
  boolean hasIPv4Tcp();
  /**
   * <code>.ipc.IPv4TcpMsg IPv4Tcp = 5;</code>
   * @return The iPv4Tcp.
   */
  com.repcomm.sneknet.protos.IPv4TcpMsg getIPv4Tcp();
  /**
   * <code>.ipc.IPv4TcpMsg IPv4Tcp = 5;</code>
   */
  com.repcomm.sneknet.protos.IPv4TcpMsgOrBuilder getIPv4TcpOrBuilder();

  /**
   * <code>.ipc.IPv4UdpMsg IPv4Udp = 6;</code>
   * @return Whether the iPv4Udp field is set.
   */
  boolean hasIPv4Udp();
  /**
   * <code>.ipc.IPv4UdpMsg IPv4Udp = 6;</code>
   * @return The iPv4Udp.
   */
  com.repcomm.sneknet.protos.IPv4UdpMsg getIPv4Udp();
  /**
   * <code>.ipc.IPv4UdpMsg IPv4Udp = 6;</code>
   */
  com.repcomm.sneknet.protos.IPv4UdpMsgOrBuilder getIPv4UdpOrBuilder();

  com.repcomm.sneknet.protos.IpcMsg.PayloadCase getPayloadCase();
}
