// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.0
// source: ipc.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IPv4Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcIPv4 int32 `protobuf:"varint,1,opt,name=SrcIPv4,proto3" json:"SrcIPv4,omitempty"`
	DstIPv4 int32 `protobuf:"varint,2,opt,name=DstIPv4,proto3" json:"DstIPv4,omitempty"`
}

func (x *IPv4Info) Reset() {
	*x = IPv4Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPv4Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPv4Info) ProtoMessage() {}

func (x *IPv4Info) ProtoReflect() protoreflect.Message {
	mi := &file_ipc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPv4Info.ProtoReflect.Descriptor instead.
func (*IPv4Info) Descriptor() ([]byte, []int) {
	return file_ipc_proto_rawDescGZIP(), []int{0}
}

func (x *IPv4Info) GetSrcIPv4() int32 {
	if x != nil {
		return x.SrcIPv4
	}
	return 0
}

func (x *IPv4Info) GetDstIPv4() int32 {
	if x != nil {
		return x.DstIPv4
	}
	return 0
}

type IPv4TcpMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcPort int32     `protobuf:"varint,1,opt,name=SrcPort,proto3" json:"SrcPort,omitempty"`
	DstPort int32     `protobuf:"varint,2,opt,name=DstPort,proto3" json:"DstPort,omitempty"`
	IPv4    *IPv4Info `protobuf:"bytes,3,opt,name=IPv4,proto3" json:"IPv4,omitempty"`
	IsSyn   bool      `protobuf:"varint,4,opt,name=IsSyn,proto3" json:"IsSyn,omitempty"`
	IsAck   bool      `protobuf:"varint,5,opt,name=IsAck,proto3" json:"IsAck,omitempty"`
	SeqId   uint32    `protobuf:"varint,6,opt,name=SeqId,proto3" json:"SeqId,omitempty"`
	Payload []byte    `protobuf:"bytes,7,opt,name=Payload,proto3" json:"Payload,omitempty"`
}

func (x *IPv4TcpMsg) Reset() {
	*x = IPv4TcpMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPv4TcpMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPv4TcpMsg) ProtoMessage() {}

func (x *IPv4TcpMsg) ProtoReflect() protoreflect.Message {
	mi := &file_ipc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPv4TcpMsg.ProtoReflect.Descriptor instead.
func (*IPv4TcpMsg) Descriptor() ([]byte, []int) {
	return file_ipc_proto_rawDescGZIP(), []int{1}
}

func (x *IPv4TcpMsg) GetSrcPort() int32 {
	if x != nil {
		return x.SrcPort
	}
	return 0
}

func (x *IPv4TcpMsg) GetDstPort() int32 {
	if x != nil {
		return x.DstPort
	}
	return 0
}

func (x *IPv4TcpMsg) GetIPv4() *IPv4Info {
	if x != nil {
		return x.IPv4
	}
	return nil
}

func (x *IPv4TcpMsg) GetIsSyn() bool {
	if x != nil {
		return x.IsSyn
	}
	return false
}

func (x *IPv4TcpMsg) GetIsAck() bool {
	if x != nil {
		return x.IsAck
	}
	return false
}

func (x *IPv4TcpMsg) GetSeqId() uint32 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

func (x *IPv4TcpMsg) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type IPv4UdpMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcPort int32     `protobuf:"varint,1,opt,name=SrcPort,proto3" json:"SrcPort,omitempty"`
	DstPort int32     `protobuf:"varint,2,opt,name=DstPort,proto3" json:"DstPort,omitempty"`
	IPv4    *IPv4Info `protobuf:"bytes,3,opt,name=IPv4,proto3" json:"IPv4,omitempty"`
	Payload []byte    `protobuf:"bytes,4,opt,name=Payload,proto3" json:"Payload,omitempty"`
}

func (x *IPv4UdpMsg) Reset() {
	*x = IPv4UdpMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPv4UdpMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPv4UdpMsg) ProtoMessage() {}

func (x *IPv4UdpMsg) ProtoReflect() protoreflect.Message {
	mi := &file_ipc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPv4UdpMsg.ProtoReflect.Descriptor instead.
func (*IPv4UdpMsg) Descriptor() ([]byte, []int) {
	return file_ipc_proto_rawDescGZIP(), []int{2}
}

func (x *IPv4UdpMsg) GetSrcPort() int32 {
	if x != nil {
		return x.SrcPort
	}
	return 0
}

func (x *IPv4UdpMsg) GetDstPort() int32 {
	if x != nil {
		return x.DstPort
	}
	return 0
}

func (x *IPv4UdpMsg) GetIPv4() *IPv4Info {
	if x != nil {
		return x.IPv4
	}
	return nil
}

func (x *IPv4UdpMsg) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type IpcMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId int32 `protobuf:"varint,1,opt,name=TransactionId,proto3" json:"TransactionId,omitempty"`
	// *when true, TransactionId is the same as request TransactionId
	IsResponse *bool `protobuf:"varint,2,opt,name=IsResponse,proto3,oneof" json:"IsResponse,omitempty"`
	// *whether a transaction was successful
	IsSuccess *bool `protobuf:"varint,3,opt,name=IsSuccess,proto3,oneof" json:"IsSuccess,omitempty"`
	// *when IsSuccess = false, the error message
	Error *string `protobuf:"bytes,4,opt,name=Error,proto3,oneof" json:"Error,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*IpcMsg_IPv4Tcp
	//	*IpcMsg_IPv4Udp
	Payload isIpcMsg_Payload `protobuf_oneof:"payload"`
}

func (x *IpcMsg) Reset() {
	*x = IpcMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpcMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpcMsg) ProtoMessage() {}

func (x *IpcMsg) ProtoReflect() protoreflect.Message {
	mi := &file_ipc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpcMsg.ProtoReflect.Descriptor instead.
func (*IpcMsg) Descriptor() ([]byte, []int) {
	return file_ipc_proto_rawDescGZIP(), []int{3}
}

func (x *IpcMsg) GetTransactionId() int32 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *IpcMsg) GetIsResponse() bool {
	if x != nil && x.IsResponse != nil {
		return *x.IsResponse
	}
	return false
}

func (x *IpcMsg) GetIsSuccess() bool {
	if x != nil && x.IsSuccess != nil {
		return *x.IsSuccess
	}
	return false
}

func (x *IpcMsg) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

func (m *IpcMsg) GetPayload() isIpcMsg_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *IpcMsg) GetIPv4Tcp() *IPv4TcpMsg {
	if x, ok := x.GetPayload().(*IpcMsg_IPv4Tcp); ok {
		return x.IPv4Tcp
	}
	return nil
}

func (x *IpcMsg) GetIPv4Udp() *IPv4UdpMsg {
	if x, ok := x.GetPayload().(*IpcMsg_IPv4Udp); ok {
		return x.IPv4Udp
	}
	return nil
}

type isIpcMsg_Payload interface {
	isIpcMsg_Payload()
}

type IpcMsg_IPv4Tcp struct {
	IPv4Tcp *IPv4TcpMsg `protobuf:"bytes,5,opt,name=IPv4Tcp,proto3,oneof"`
}

type IpcMsg_IPv4Udp struct {
	IPv4Udp *IPv4UdpMsg `protobuf:"bytes,6,opt,name=IPv4Udp,proto3,oneof"`
}

func (*IpcMsg_IPv4Tcp) isIpcMsg_Payload() {}

func (*IpcMsg_IPv4Udp) isIpcMsg_Payload() {}

var File_ipc_proto protoreflect.FileDescriptor

var file_ipc_proto_rawDesc = []byte{
	0x0a, 0x09, 0x69, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x69, 0x70, 0x63,
	0x22, 0x3e, 0x0a, 0x08, 0x49, 0x50, 0x76, 0x34, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x53, 0x72, 0x63, 0x49, 0x50, 0x76, 0x34, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x53,
	0x72, 0x63, 0x49, 0x50, 0x76, 0x34, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x73, 0x74, 0x49, 0x50, 0x76,
	0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x44, 0x73, 0x74, 0x49, 0x50, 0x76, 0x34,
	0x22, 0xbf, 0x01, 0x0a, 0x0a, 0x49, 0x50, 0x76, 0x34, 0x54, 0x63, 0x70, 0x4d, 0x73, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x73, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x44, 0x73, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x49, 0x50, 0x76, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x70, 0x63, 0x2e, 0x49, 0x50, 0x76, 0x34, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x49, 0x50, 0x76, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x53, 0x79, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x53, 0x79, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x49, 0x73, 0x41, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x41,
	0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x65, 0x71, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x53, 0x65, 0x71, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0x7d, 0x0a, 0x0a, 0x49, 0x50, 0x76, 0x34, 0x55, 0x64, 0x70, 0x4d, 0x73, 0x67,
	0x12, 0x18, 0x0a, 0x07, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x73,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x44, 0x73, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x49, 0x50, 0x76, 0x34, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x70, 0x63, 0x2e, 0x49, 0x50, 0x76, 0x34, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x49, 0x50, 0x76, 0x34, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x22, 0x9d, 0x02, 0x0a, 0x06, 0x49, 0x70, 0x63, 0x4d, 0x73, 0x67, 0x12, 0x24, 0x0a, 0x0d,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0a, 0x49, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0a, 0x49, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x49, 0x73, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x09, 0x49, 0x73,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x07, 0x49, 0x50, 0x76, 0x34, 0x54, 0x63, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x70, 0x63, 0x2e, 0x49, 0x50, 0x76,
	0x34, 0x54, 0x63, 0x70, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x07, 0x49, 0x50, 0x76, 0x34, 0x54,
	0x63, 0x70, 0x12, 0x2b, 0x0a, 0x07, 0x49, 0x50, 0x76, 0x34, 0x55, 0x64, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x70, 0x63, 0x2e, 0x49, 0x50, 0x76, 0x34, 0x55, 0x64,
	0x70, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x07, 0x49, 0x50, 0x76, 0x34, 0x55, 0x64, 0x70, 0x42,
	0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x49,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x49, 0x73,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x42, 0x32, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x73, 0x6e, 0x65, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x42,
	0x03, 0x49, 0x50, 0x43, 0x50, 0x01, 0x5a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ipc_proto_rawDescOnce sync.Once
	file_ipc_proto_rawDescData = file_ipc_proto_rawDesc
)

func file_ipc_proto_rawDescGZIP() []byte {
	file_ipc_proto_rawDescOnce.Do(func() {
		file_ipc_proto_rawDescData = protoimpl.X.CompressGZIP(file_ipc_proto_rawDescData)
	})
	return file_ipc_proto_rawDescData
}

var file_ipc_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_ipc_proto_goTypes = []interface{}{
	(*IPv4Info)(nil),   // 0: ipc.IPv4Info
	(*IPv4TcpMsg)(nil), // 1: ipc.IPv4TcpMsg
	(*IPv4UdpMsg)(nil), // 2: ipc.IPv4UdpMsg
	(*IpcMsg)(nil),     // 3: ipc.IpcMsg
}
var file_ipc_proto_depIdxs = []int32{
	0, // 0: ipc.IPv4TcpMsg.IPv4:type_name -> ipc.IPv4Info
	0, // 1: ipc.IPv4UdpMsg.IPv4:type_name -> ipc.IPv4Info
	1, // 2: ipc.IpcMsg.IPv4Tcp:type_name -> ipc.IPv4TcpMsg
	2, // 3: ipc.IpcMsg.IPv4Udp:type_name -> ipc.IPv4UdpMsg
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_ipc_proto_init() }
func file_ipc_proto_init() {
	if File_ipc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ipc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPv4Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPv4TcpMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPv4UdpMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpcMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ipc_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*IpcMsg_IPv4Tcp)(nil),
		(*IpcMsg_IPv4Udp)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ipc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ipc_proto_goTypes,
		DependencyIndexes: file_ipc_proto_depIdxs,
		MessageInfos:      file_ipc_proto_msgTypes,
	}.Build()
	File_ipc_proto = out.File
	file_ipc_proto_rawDesc = nil
	file_ipc_proto_goTypes = nil
	file_ipc_proto_depIdxs = nil
}
